#include <stdio.h>
#include <stdlib.h>
 
// Structure of a linked list node
struct node {
    int info;
    struct node* next;
};
 
struct node* last = NULL; // Pointer to last node
 
void prependList(int data) {
    // Initialize a new node
    struct node* p;
    p = (struct node*)malloc(sizeof(struct node));
 
    // If the new node will be first node 
    if (last == NULL) {
        p->info = data;
        p->next = p;
        last = p;
    }
 
    // last->next is the first node in the list 
    else {
        p->info = data;
        // Set first node as successor of new node
        p->next = last->next; 
 
        // The new node becomes the first node 
        last->next = p;  
    }
}
 
// Function to print the list
void printList() {
    struct node* p;

    printf("[ ");
    if (last == NULL)
        printf("]\n");
 
    else {
        p = last->next; // Go to first node
 
        do {
            printf(" %d ", p->info);
            p = p->next;
        } while (p != last->next);
    }
    printf("]\n");
}

void appendList(int data) {
    struct node* p;
    p = (struct node*)malloc(sizeof(struct node));
 
    if (last == NULL) {
        // Append to empty list
        p->info = data;
        p->next = p;
        last = p;
    } else {
        // Append to nonempty list
        p->info = data;
        p->next = last->next; // Insert after the last  
        last->next = p;       // Set the next of last
        last = p;             // Set p as the last 
    }
} 

void deleteFirst() {
    struct node* p;
    
    if (last == NULL) {
        printf("Error: attempt to delete from empty list!\n");
    } else {
        p = last->next; // Go to the first node
        printf("Deleted %d\n",p->info);
        last->next = p->next; // Detach the first node
    }
    return;
}

void deleteItem(int data) {
    struct node *p;
    struct node *q;

    if (last == NULL) {
        printf("Error: empty list!\n");
        return;
    }
   
    // Only one item in list 
    if (last == last->next && last->info == data) {
        printf("Deleted: %d\n",last->info);
        last = NULL; // Make list empty
        return;
    }
    p = last; 
    q = p->next;
    if (p->info == data) {
        while (q->next != last)
            q = q->next;   // Find previous item
        q->next = p->next; // Delete current item
        last = q;          // Set last to previous
        printf("Deleted: %d\n",p->info);
        return;
    }
    while (p->info != data) {
        q = p;       // Set previous 
        p = p->next; // Go to next 
        if (p == last) { 
           printf("Error: item %d not present in list\n",data);
           return;   // Reached last: item not found 
        } 
        if (p->info == data) {
             q->next = p->next; // Delete current item
             printf("Deleted: %d\n",p->info);
             return;
        }
    } 
}


int main() {
    
    prependList(10);
    prependList(20);
    prependList(30);
 
    printf("After prepend\n");
    printList();   // Display the list

    appendList(40);
    appendList(50);
    appendList(60);
    printf("After append\n");
    printList(); // Display the list
    deleteFirst();
    printList(); // Display the list
    deleteItem(60);
    printList(); // Display the list
}
