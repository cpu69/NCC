
#include <stdio.h>
#include <stdlib.h>
struct node {
    int info;
    struct node *next;
};

int isEmpty(struct node *list){
    return (list == NULL);
}

struct node *searchList(struct node *list, int n) {
   struct node *p = list;
   while (p != NULL) {
       if (p->info == n)
          return p; // n belongs to list
       p = p->next;
   }
   return p; // Either NULL or ptr to n
}

struct node *endList(struct node *list) {
   struct node *p = list;
   if (p == NULL) 
	   return NULL;
   while (p->next != NULL) 
       p = p->next;
   return p;
}

void printList(struct node *list){
    while (!isEmpty(list)) {
        printf(" %d ", list->info);
        list = list->next;
    }
    printf("\n");
}

struct node *prependToList(struct node *list, int n) {
   struct node *newNode;
  
   if (searchList(list, n) != NULL) {
       printf("%d exists, prepend not allowed \n", n); 
       return list;
   }
   else {
       newNode = malloc(sizeof(struct node));
       if (newNode == NULL) {
           printf("Creation of node failed\n"); 
           return list; // List is unchanged.
       }
       else {
           // Creation is successful
           newNode->info = n;
           newNode->next = list;
        }
   } 
   return newNode;
}

struct node *appendToList(struct node *list, int n) {
    struct node *newNode, *p;
    if (searchList(list, n)	!= NULL) {
       printf("%d exists in the list, append not allowed\n", n);
       return list; // List unchanged
    }
	else {  
        // Creation successful
	    newNode = malloc(sizeof(struct node));
	    newNode->info = n;
	    newNode->next = NULL;
	    p = endList(list); // get pointer to end of the list
	    if (p == NULL)  {
	    	list = newNode; // Append to empty list 
            return list;    // Return pointer to it
        } else {
	    	p->next = newNode; // Append to nonempty list
	        return list;       // newNode is last node
        }
    } 
}

struct node *removeFromList(struct node *list, int n) {
   struct node *q = list, *p = list;

   if (p->info == n) {
       printf("%d is deleted from list\n", p->info);
	   return list->next; // n is the first element
   } 
   p = p->next; // q is not changed so it is previous
   while (p != NULL) {
      if (p->info == n) {
          printf("%d is deleted from list\n", p->info);
          q->next = p->next; // Remove node 
		  return list;
	  }
      q = p;       // previous is current 
      p = p->next; // current to next
   } 
   // While exists with p == NULL 
   //if (p == NULL) 
   printf("%d does not exist, deletion not possible\n", n);
   return list;
}

int main() {
   int i, n;
   struct node *first = NULL;
   for (i = 5; i > 0; i--) 
       first = prependToList(first, i*10); // Prepend 5 nodes
   printList(first); // Print list
   for (i = 5; i < 10; i++)  
       first = appendToList(first, (i+1)*10); // Append 5 more 
   printList(first); // Print list
   //first = appendToList(first, 50); // Append 
   first = prependToList(first, 50); // Prepend 50
   first = appendToList(first, 30);
   printf("Enter number to be deleted: "); 
   scanf("%d", &n);
   first = removeFromList(first, n);
   printList(first);
}

