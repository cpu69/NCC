#include <stdio.h>
#include <stdlib.h>
struct Node {
    int info;
    struct Node * prev;
    struct Node * next;
};

struct Node * createNewNode() {
    struct Node * p;
    p = (struct Node *) malloc(sizeof(struct Node *));
    if (p == NULL) {
        printf("Error: creation failed\n");
        return NULL;
    } 
    //printf("created new node\n");
    p->next = NULL; 
    p->prev = NULL;
    return p;
}

struct Node * makeNull(struct Node *list){
    return NULL;
}

struct Node * searchList(struct Node * list, int data) {
    struct Node * p = list; 
    while (p != NULL) {
        if (p->info == data)
            return p;
        else
            p = p->next;
    }
    return NULL;
}

struct Node * insertBeforeDLL(struct Node * list, int x, int data) { 
    struct Node *p;
    struct Node *q = createNewNode();
    if (q == NULL) {
        return list;
    }

    p = searchList(list, data);
    if (p == NULL) {
        printf("Error: %d not present\n", data);
        return list; 
    }

    q->info = x;
    //if (p != NULL) {
        if (p->prev == NULL) {
            printf("Inserting as the first node\n");
            q->prev = p->prev;
            q->next = p;
            p->prev = q;
            list = q;
        } else {
            q->prev = p->prev;
            q->next = p; 
            p->prev->next = q;
            p->prev = q;
        //}
        return list;
    }
}

struct Node * insertAfterDLL(struct Node * list, int x, int data) { 
    struct Node *p;
    struct Node *temp;
    struct Node *q = createNewNode();

    if (q == NULL) {
        printf("Error: cannot create \n");
        return list;
    }
    else 
        q->info = x;
    p = searchList(list, data);
    if (p != NULL) {
        if (p->next == NULL) {
            printf("insert after last\n");
            q->next = p->next;
            q->prev = p;
            p->next = q;
        } else {
            printf("insert after %d\n",p->info);
            q->next = p->next;
            p->next->prev = q;
            q->prev = p;
            p->next = q;
        }
    }
    return list;
}

struct Node * appendDLL(struct Node * list, int data) { 
    struct Node *p = createNewNode();
    p->info = data;
    printf("to insert %d \n",p->info);
     
    if (list == NULL) {
        printf("Appending to empty list\n");
        return p;
    }
    p->next = list;
    list->prev = p;
    return p;
} 

struct Node * prependDLL(struct Node * list, int data) { 
    struct Node *p = createNewNode();
    p->info = data;
    printf("to prepend %d \n",p->info);
     
    if (list == NULL) {
        printf("Prepending to empty list\n");
        return p;
    }
    // Prepend to nonempty list
    p->prev = list->prev; // p->prev = NULL
    list->prev = p;
    p->next = list; // p->next = list
    return p; 
} 

struct Node * removeDLL(struct Node * list, int data) { 
    struct Node *p;
    //struct Node *q;
    p = searchList(list, data);
    if (p == NULL) {
        printf("Error: %d not present\n",data);
        return list;
    }
    if (p->next == NULL && p->prev == NULL) {
       printf("Deleting only node in the list %d\n",p->info);
       return NULL;
    } 
    if (p->next == NULL) {
       printf("Deleting last node %d\n",p->info);
       p->prev->next = NULL;
       return list;
    } 
    if (p->prev == NULL) {
       printf("Deleting first node %d\n",p->info);
       list = list->next;
       list->prev = NULL;
       return list;
    } 
    printf("Deleting %d\n",p->info);
    p->prev->next = p->next;
    p->next->prev = p->prev;
    return list;
}

void printListDLL(struct Node *list){
    struct Node *p = list;
    if (p == NULL) {
        printf("List is empty\n");
        return;
    }
    printf("List is: [ ");
    while (p != NULL) {
        printf("%d ",p->info);
        p = p->next;
    }
    printf("]\n");
}

void main() {
    struct Node *head = NULL;
    head = appendDLL(head,10);
    printListDLL(head);
    head = insertAfterDLL(head,20,10);
    printListDLL(head);
    head = appendDLL(head,30);
    printListDLL(head);
    head = insertAfterDLL(head,50,10);
    printListDLL(head);
    head = removeDLL(head,50);
    printListDLL(head);
    head = removeDLL(head,20);
    printListDLL(head);
    head = insertBeforeDLL(head,20,10);
    head = insertBeforeDLL(head,50,20);
    head = insertBeforeDLL(head,60,70);
    printListDLL(head);
    head = removeDLL(head,50);
    printListDLL(head);
    head = makeNull(head);
    head = prependDLL(head,70);
    printListDLL(head);
    head = insertAfterDLL(head,60,70);
    printListDLL(head);
}
