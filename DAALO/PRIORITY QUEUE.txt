#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define MAX_SIZE 20 

typedef struct heap{
    int *arr; // Storage for elements
    int nElement;    // No elements present
    int capacity; // Capacity of heap
    int type; // 0 for min heap, 1 for max heap
} HEAP;

// Function headers for heap operations 
HEAP *CreateHeap(int, int); // Creates heap of given capacity and type
void insert(HEAP *, int); // Inserts element into heap 
void printHeap(HEAP *); // Prints a heap
void heapifyBottomTop(HEAP *, int); // Decrease or increase value 
void heapifyTopBottom(HEAP *, int); // Decrease or increase value 
int deleteMin(HEAP *); // Deletes minimum element
int randInput(); // Creates random input for insertion 
void decreaseKey(HEAP *, int, int); 
void increaseKey(HEAP *, int, int); 
int isEmpty(HEAP *);

// Main program
int main(){
    int i;
    HEAP *heap = CreateHeap(MAX_SIZE, 0); //Min Heap for max heap use 1
    if( heap == NULL ){
        printf("Error: create unsuccessful\n");
        return -1;
    }
    for(i = 0; i < 9; i++) 
        insert(heap, randInput()+i); // Get  10 random values in heap

    printHeap(heap); // Print heap contents

    decreaseKey(heap, 3, 3);
    printHeap(heap);
    increaseKey(heap, 3, 3);
    printHeap(heap);


    for(i = 5; i >= 0; i--){
        printf("Deleted minimum: %d\n", deleteMin(heap));
        printHeap(heap);
    }


    return 0;
}

int isEmpty(HEAP *h) {
    return h->nElement == 0;
}

int randInput(){ 
    time_t t;  // Defined in <time.h>
    srand((unsigned) time(&t)); // Seeding value 
    return rand() % 100;        // Get between 1 to 100
}

HEAP *CreateHeap(int capacity,int type){
    HEAP *h = (HEAP * ) malloc(sizeof(HEAP)); 
    
    // Terminate if memory allocation fails 
    if(h == NULL){
        printf("Memory Error!");
        return NULL;
    }
    h->type = type;
    h->nElement = 0;  // Empty heap
    h->capacity = capacity;
    h->arr = (int *) malloc(capacity*sizeof(int)); //size in bytes

    //Check if allocation succeed
    if ( h->arr == NULL){
        printf("Error: malloc failed.\n");
        return NULL;
    }
    return h;
}

void insert(HEAP *h, int key){
    if( h->nElement < h->capacity){
        h->arr[h->nElement] = key;
        heapifyBottomTop(h, h->nElement);
        h->nElement++;
    }
}

void heapifyBottomTop(HEAP *h,int index){
    int temp;
    int parent = (index-1)/2;

    if(h->arr[parent] > h->arr[index]){
        //swap and recursive call
        temp = h->arr[parent];
        h->arr[parent] = h->arr[index];
        h->arr[index] = temp;
        heapifyBottomTop(h,parent);
    }
}

void heapifyTopBottom(HEAP *h, int parent){
    int left = 2*parent + 1;
    int right = 2*parent + 2;
    int min;
    int temp;

    if(left >= h->nElement || left < 0)
        left = -1;
    if(right >= h->nElement || right < 0)
        right = -1;

    if(left != -1 && h->arr[left] < h->arr[parent])
        min=left;
    else
        min =parent;
    if(right != -1 && h->arr[right] < h->arr[min])
        min = right;

    if(min != parent){
        temp = h->arr[min];
        h->arr[min] = h->arr[parent];
        h->arr[parent] = temp;

        // Recursive  call
        heapifyTopBottom(h, min);
    }
}

int deleteMin(HEAP *h){
    int pop;
    if(isEmpty(h)){
        printf("\nHEAP is Empty\n");
        return -1;
    }
    // Replace first node by last and delete last
    pop = h->arr[0];
    h->arr[0] = h->arr[h->nElement-1];
    h->nElement--;
    heapifyTopBottom(h, 0);
    return pop;
}

void printHeap(HEAP *h){
    int i;
    printf("Heap\n");
    for(i = 0; i < h->nElement; i++){
        printf("%d, ",h->arr[i]);
    }
    printf("\n");
}


void decreaseKey(HEAP *h, int index, int val) {
    
    if (isEmpty(h)) {
        printf("Error: heap is empty\n"); 
        return;
    }
    h->arr[index] -= val;
    if (h->type == 0) 
         heapifyBottomTop(h, index);
    else 
         heapifyTopBottom(h, index);
}

void increaseKey(HEAP *h, int index, int val) {
    
    if (isEmpty(h)) {
        printf("Error: heap is empty\n"); 
        return;
    }
    h->arr[index] += val;
    if (h->type == 0) 
         heapifyTopBottom(h, index);
    else 
         heapifyBottomTop(h, index);
}
