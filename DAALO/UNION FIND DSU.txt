#include <stdio.h>
#include <stdlib.h>
#define SIZE 40  

typedef struct queue {
  int items[SIZE];
  int front;
  int rear;
} QUEUE;

QUEUE* createQueue();
void enqueue(QUEUE* q, int);
int dequeue(QUEUE* q);
//void display(QUEUE* q);
int isEmpty(QUEUE* q);
void printQueue(QUEUE* q);


// Structure for the adjacency list of a node
typedef struct node {
  int vertex;
  struct node* next;
} NODE;


// Graph structure consisting of array of pointers for
// adjacency lists, a mark or flag for each node and 
// the total number of vertices.
typedef struct Graph {
  int nVertices;
  int* visited;
  NODE ** adjLists;
} GRAPH;

NODE* createNode(int);                  // Creates a node
GRAPH* createGraph(int);                // Creates a graph

void insertEdge(GRAPH*, int, int);      // Inserts edges 
void deleteFromAlist(GRAPH*, int, int); // Delete from adjacency list 
void deleteEdge(GRAPH*, int, int);      // Delete an edge of graph 
void printGraph(GRAPH*);                // Prints graph
void DFS(GRAPH*, int);                  // DFS of graph
void BFS(GRAPH*, int);                  // BFS of graph

int main() {
  GRAPH* graph = createGraph(6);
  int comp = 0;
  int i;

  insertEdge(graph, 0, 1);
  insertEdge(graph, 0, 2);
  insertEdge(graph, 1, 2);
  insertEdge(graph, 2, 5);
  insertEdge(graph, 3, 4);
  insertEdge(graph, 1, 5);

  printf("After insertion of edges: ");
  printGraph(graph);

  for (i = 0; i < 6; i++) {
      if (graph->visited[i] == 0) {
          comp++; // New connected component
          printf("Component No: %d\n", comp);
          DFS(graph, i);
      }
  }
  printf("\nBegin BFS\n");
  
  // Unmark all marked vertices for performing BFS

  for (i = 0; i < 6; i++)
      graph->visited[i] = 0;
  comp = 0;
  for (i = 0; i < 6; i++) {
      if (graph->visited[i] == 0) {
          comp++; // New connected component
          printf("\nComponent No: %d\n", comp);
          BFS(graph, i);
      }
  }
  return 0;
}


// Create a node
NODE* createNode(int v) {
  struct node* newNode = malloc(sizeof(NODE));
  newNode->vertex = v;
  newNode->next = NULL;
  return newNode;
}

// Create graph
GRAPH* createGraph(int vertices) {
  int i;
  GRAPH* graph = malloc(sizeof(GRAPH));
  if (graph == NULL) {
      printf("Memory allocation error\n");
      return NULL;
  }
  else { 
      graph->adjLists = malloc(vertices * sizeof(NODE*));
      if (graph->adjLists == NULL) {
           printf("Memory allocation error\n");
           return NULL;
      }
      else { 
           graph->visited = malloc(vertices * sizeof(int));
           if (graph->visited == NULL) {
              printf("Memory allocation error\n");
              return NULL;
           }
      }
  }
  graph->nVertices = vertices;
  for (i = 0; i < vertices; i++) {
    graph->adjLists[i] = NULL;
    graph->visited[i] = 0;
  }
  return graph;
}

void insertEdge(GRAPH* graph, int src, int dest) {
   
  // Add edge from src to dest
  NODE* newNode = createNode(dest);
  newNode->next = graph->adjLists[src];
  graph->adjLists[src] = newNode;

  // Add edge from dest to src
  newNode = createNode(src);
  newNode->next = graph->adjLists[dest];
  graph->adjLists[dest] = newNode;
}

// Delete node dest from adjaceny list of src 
void deleteFromAlist(GRAPH* graph, int src, int dest) {
    NODE * ptr = graph->adjLists[src];
    if (ptr == NULL) {
        printf(" Edge %d->%d does not exist\n",src,dest);
        return;
    }
    if (ptr->vertex == dest) {
        graph->adjLists[src] = ptr->next;
        return;
    }
    NODE * prev = ptr;
    ptr = ptr->next;
    while (ptr->vertex != dest && ptr->next != NULL) {
       prev = ptr; 
       ptr = ptr->next;
    }
    if (ptr->vertex == dest) { 
       // printf(" deleting edge %d->%d\n",src, ptr->vertex);
        prev->next = ptr->next;
    }
    else
        printf(" Edge %d->%d does not exist\n",src,dest);
    return;
}

// Delete src and dest from each other's adjacency
void deleteEdge(GRAPH * graph, int src, int dest) {
    // printf(" deleting edge (%d, %d)\n",src, dest);
     deleteFromAlist(graph, src, dest);
     deleteFromAlist(graph, dest, src);
}

// Print the graph
void printGraph(GRAPH* graph) {
  int v;
  for (v = 0; v < graph->nVertices; v++) {
    NODE* p = graph->adjLists[v];
    printf("AdjList[%d]: ", v);

    if (p == NULL) 
        printf("\u03A6\n");
    else {
        while (p!= NULL) {
          if (p->next == NULL)  
              printf("%d \n", p->vertex); // Last vertex in list
          else
              printf("%d -> ", p->vertex); // Intermediate vertices 
          p = p->next;
        }
     }
  }
  printf("\n");
}

void DFS(GRAPH* graph, int vertex) {
  NODE* adjList = graph->adjLists[vertex];
  NODE* p = adjList;
  int currVtx; 
  graph->visited[vertex] = 1;
  printf("Visited %d \n", vertex);

  while (p != NULL) {
    currVtx = p->vertex;
    printf("current vertex: %d\n",currVtx);
    if (graph->visited[currVtx] == 0) 
        DFS(graph, currVtx);
    p = p->next;
  }
}

// Create a queue
QUEUE* createQueue() {
  QUEUE* q = malloc(sizeof(QUEUE));
  q->front = -1;
  q->rear = -1;
  return q;
}

// Check if the queue is empty
int isEmpty(QUEUE* q) {
  if (q->rear == -1)
    return 1;
  else
    return 0;
}

// Adding elements into queue
void enqueue(QUEUE* q, int value) {
  if (q->rear == SIZE - 1)
    printf("\nQueue is Full!!");
  else {
    if (q->front == -1)
      q->front = 0;
    q->rear++;
    q->items[q->rear] = value;
  }
}

// Removing elements from queue
int dequeue(QUEUE* q) {
  int item;
  if (isEmpty(q)) {
    printf("Queue is empty");
    item = -1;
  } else {
    item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
      printf("Reinitialize queue\n");
      q->front = q->rear = -1;
    }
  }
  return item;
}

// Print the queue
void printQueue(QUEUE* q) {

  if (isEmpty(q)) {
    printf("Queue is empty\n");
  } else {
    printf("\nQueue: ");
    for (int i = q->front; i < q->rear + 1; i++) {
      printf("%d ", q->items[i]);
    }
  }
  printf("\n");
}


// BFS algorithm
void BFS(GRAPH* graph, int startVtx) {
  QUEUE* q = createQueue();

  graph->visited[startVtx] = 1;
  enqueue(q, startVtx);

  while (!isEmpty(q)) {
    printQueue(q);
    int currVtx = dequeue(q);
    printf("Visited %d\n", currVtx);

    NODE* p = graph->adjLists[currVtx];

    while (p) {
      int adjVtx = p->vertex;

      if (graph->visited[adjVtx] == 0) {
        graph->visited[adjVtx] = 1;
        enqueue(q, adjVtx);
      }
      p = p->next;
    }
  }
}


