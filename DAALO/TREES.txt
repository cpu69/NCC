
#include <stdlib.h>
#include <stdio.h>
typedef struct treenode {
    int info;
    struct treenode * left;
    struct treenode * right;
} TREENODE;

void preOrder(TREENODE *); 
void postOrder(TREENODE *); 
void inOrder(TREENODE *);
TREENODE * create(); 
TREENODE * search(TREENODE *, int); 
int isInternal(TREENODE *);
int treeHeight(TREENODE *);
int treeSize(TREENODE *);

// Main program to check if all functions work as needed
int main() {
    TREENODE * t, *t2;
    int x;

    t = create();
    preOrder(t);
    printf("\n");
     
    inOrder(t);
    printf("\n");

    postOrder(t);
    printf("\n");

    printf("Give element to find: ");
    scanf("%d", &x);

    t2 = search(t,x); 
    if (t2 != NULL) 
       printf("Found %d\n",t2->info);
    else 
       printf("%d not found\n",x);

    printf("Give element to find: ");
    scanf("%d", &x);
    t2 = search(t,x); 
    if (t2 != NULL) 
       printf("Found %d\n",t2->info);
    else 
       printf("%d not found\n",x);
    printf("Height = %d\n",treeHeight(t));
    printf("Size = %d\n",treeSize(t));
    printf("Left tree size = %d\n",treeSize(t->left));
    printf("Right tree size = %d\n",treeSize(t->right));

}

void preOrder(TREENODE *t) {
    if (t != NULL) {
        printf("%d\t", t->info);
        preOrder(t->left);
        preOrder(t->right);
    }
}

void postOrder(TREENODE *t) {
    if (t != NULL) {
        postOrder(t->left);
        postOrder(t->right);
        printf("%d\t", t->info);
    }
}

void inOrder(TREENODE *t) {
    if (t != NULL) {
        inOrder(t->left);
        printf("%d\t", t->info);
        inOrder(t->right);
    }
}

TREENODE * create() {
    int x;
    TREENODE *p;
    printf("Enter data (-1 for no data): ") ;
    scanf("%d", &x);
    if (x == -1)
       return NULL;
    p = (TREENODE *) malloc(sizeof(TREENODE)) ;
    if (p == NULL) {
        printf("Error in malloc\n");
        exit(1);
    }
    p->info = x;
    printf("Enter leftchild of %d: \n", x) ;
    p->left = create() ;
    printf("Enter rightchild of %d: \n", x ) ;
    p->right = create() ;
    return p;
}

TREENODE * search(TREENODE * t, int x) { 
    TREENODE *p ;
    if ((t == NULL) || ( t->info == x))
       return t ;
    p = search(t->left, x);
    if (p == NULL) 
        p = search(t->right, x) ;
    return p;
}

int isInternal(TREENODE *t) {
    int n = 0;
    n = (t != NULL) && ((t->left != NULL) || (t->right != NULL)) ;
    return n;
}

int treeHeight(TREENODE *t) {
   int rHeight, lHeight;
   int maxHeight;
   int i;
   if(t == NULL) {
     return 0; 
   } else {
      maxHeight = 0;
      lHeight = treeHeight(t->left); 
      rHeight = treeHeight(t->right);
      if (rHeight > lHeight) {
          if (maxHeight < rHeight)
              maxHeight = rHeight; 
      } else {
          if (maxHeight < lHeight)
              maxHeight = lHeight; 
     }
     return maxHeight + 1;
    }
}

int treeSize(TREENODE *t) {
    int size;
    if (t == NULL) 
        return 0;
    else {
        size = 1 + treeSize(t->left) + treeSize(t->right);
        return size;
    }
}


