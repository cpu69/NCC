
// Huffman Coding in C

#include <stdio.h>
#include <stdlib.h>

#define MAXHEIGHT 50

typedef struct node {
  char symbol;
  int freq;
  struct node *left, *right;
} HNODE;   // Define structure for a tree node

typedef struct minHeap {
  int size;
  int capacity;
  HNODE **array;
} MHEAP;   // Define heap (tree) of nodes for storing codes

// Functions to be used

HNODE *newNode(char, int); // Creates a new tree node
HNODE *deleteMin(MHEAP *); // Deletes minimum and restores heap order 
MHEAP *createHeap(int); // Creates a heap of given capacity 
MHEAP *createAndBuildHeap(char[], int[], int); // Create and builds heap 
HNODE *buildHuffmanTree(char[], int[], int); // Builds Huffman tree 

void heapify(MHEAP *, int); // Restores heap after insertion and deletion
void insertHeap(MHEAP *, HNODE *); // Inserts into heap 
void buildHeap(MHEAP *); // Builds the heap 
void HuffmanCodes(char[], int[], int); // Creating Huffman codes 

void swapHNODE(HNODE **, HNODE **); // Swap for heapify operation 
int checkSizeOne(MHEAP *);  // Checks for heap of size=1 

// Main driver program
int main() {
  char arr[] = {'A', 'B', 'C', 'D', 'E', 'F'};
  int freq[] = {5, 1, 6, 3, 10, 9};

  int size = sizeof(arr) / sizeof(arr[0]);

  printf("\n--------------------\n");
  printf(" Symbols | Huffman code ");
  printf("\n--------------------\n");

  HuffmanCodes(arr, freq, size);
  printf("--------------------\n");
}


// Create a new node for insertion
HNODE *newNode(char symbol, int freq) {
  HNODE *p = (HNODE *)malloc(sizeof(HNODE));

  if (p == NULL) {
      printf("Failure: memory allocation\n"); 
      return NULL;
  }
  p->left = p->right = NULL;
  p->symbol = symbol;
  p->freq = freq;

  return p;
}

// Create min heap storage of given capacity
MHEAP *createHeap(int capacity) {
  MHEAP *h = (MHEAP *)malloc(sizeof(MHEAP));

  h->size = 0;

  h->capacity = capacity;

  h->array = (HNODE **) malloc(h->capacity * sizeof(HNODE *));
  return h;
}

// Swap the heap nodes for heapify operation 
void swapHNODE(HNODE **a, HNODE **b) {
  HNODE *t = *a;
  *a = *b;
  *b = t;
}

// Heapify operation used after deletion and insertion
void heapify(MHEAP *h, int idx) {
  int smallest = idx;
  int left = 2 * idx + 1;
  int right = 2 * idx + 2;

  if (left < h->size && h->array[left]->freq < h->array[smallest]->freq)
    smallest = left;

  if (right < h->size && h->array[right]->freq < h->array[smallest]->freq)
    smallest = right;

  if (smallest != idx) {
    swapHNODE(&h->array[smallest], &h->array[idx]);
    heapify(h, smallest);
  }
}

// Check if size if 1
int checkSizeOne(MHEAP *h) {
  return (h->size == 1);
}

// Extract min
HNODE *deleteMin(MHEAP *h) {
  HNODE *p = h->array[0];
  h->array[0] = h->array[h->size - 1];

  --h->size;
  heapify(h, 0);

  return p;
}

// Insertion function
void insertHeap(MHEAP *h, HNODE *hNode) {
  ++h->size;
  int i = h->size - 1;

  while (i && hNode->freq < h->array[(i - 1) / 2]->freq) {
    h->array[i] = h->array[(i - 1) / 2];
    i = (i - 1) / 2;
  }
  h->array[i] = hNode;
}

void buildHeap(MHEAP *h) {
  int n = h->size - 1;
  int i;

  for (i = (n - 1) / 2; i >= 0; --i)
    heapify(h, i);
}

int isLeaf(HNODE *root) {
  return !(root->left) && !(root->right);
}

MHEAP *createAndBuildHeap(char symbol[], int freq[], int size) {
  MHEAP *h = createHeap(size);

  for (int i = 0; i < size; ++i)
    h->array[i] = newNode(symbol[i], freq[i]);

  h->size = size;
  buildHeap(h);

  return h;
}

HNODE *buildHuffmanTree(char symbol[], int freq[], int size) {
  HNODE *left, *right, *top;
  MHEAP *h = createAndBuildHeap(symbol, freq, size);

  while (!checkSizeOne(h)) {
    left = deleteMin(h);
    right = deleteMin(h);

    top = newNode('$', left->freq + right->freq);

    top->left = left;
    top->right = right;

    insertHeap(h, top);
  }
  return deleteMin(h);
}

// Print the array
void printArray(int arr[], int n) {
  int i;
  for (i = 0; i < n; ++i)
    printf("%d", arr[i]);

  printf("\n");
}

// Print the codes
void printHCodes(HNODE *root, int arr[], int top) {
  if (root->left) {
    arr[top] = 0;
    printHCodes(root->left, arr, top + 1);
  }
  if (root->right) {
    arr[top] = 1;
    printHCodes(root->right, arr, top + 1);
  }
  if (isLeaf(root)) {
    printf("    %c    |  ", root->symbol);
    printArray(arr, top);
  }
}

// Wrapper function
void HuffmanCodes(char symbol[], int freq[], int size) {
  int arr[MAXHEIGHT], top = 0;
  HNODE *root = buildHuffmanTree(symbol, freq, size);

  printHCodes(root, arr, top);
}


